# From official documentation https://nanogui.readthedocs.io/en/latest/compilation.html?highlight=cmake
cmake_minimum_required(VERSION 3.14)

project(myapp)

find_package(OpenGL REQUIRED)

set(CMAKE_C_STANDARD 99)
set(CMAKE_CXX_STANDARD 20)

# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_SHARED  OFF CACHE BOOL " " FORCE)

# `if NOT` is what enables the same bypass for your project
if(NOT MYPROJ_EIGEN3_INCLUDE_DIR)
    # Grab or find the Eigen3 include directory.
    find_package(Eigen3 QUIET)
    if(EIGEN3_INCLUDE_DIR)
        set(MYPROJ_EIGEN3_INCLUDE_DIR ${EIGEN3_INCLUDE_DIR})
    else()
        # use the internal NanoGUI copy of Eigen
        set(MYPROJ_EIGEN3_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/nanogui/ext/eigen)
    endif()
endif()

message(STATUS "Using Eigen3 from directory: ${MYPROJ_EIGEN3_INCLUDE_DIR}")
set(NANOGUI_EIGEN_INCLUDE_DIR ${EIGEN3_INCLUDE_DIR} CACHE BOOL " " FORCE)

# set any other NanoGUI specific variables you need (shown in above sections)
add_subdirectory(lib/nanogui nanogui)

# include it for your project as well (or append to a list
# and include that list later, depending on your setup)
include_directories(${MYPROJ_EIGEN3_INCLUDE_DIR})

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/nanogui/include)
include_directories(${NANOGUI_EXTRA_INCS})

# Include/
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)

set(SOURCE_FILES
	src/main.cpp
)

set(HEADER_FILES
)

# Compile a target using NanoGUI
add_executable(myapp ${SOURCE_FILES} ${HEADER_FILES})

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(myapp PRIVATE nanogui ${NANOGUI_EXTRA_LIBS})
